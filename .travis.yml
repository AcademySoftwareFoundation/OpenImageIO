# .travis.yml for OIIO

language: cpp
sudo: false
compiler:
    - clang
    - gcc
os:
    - linux
    - osx
#osx_image: xcode7
dist: trusty

# Do a default build (C++03, sse2), an sse4.2 build, and a C++11 build.
# Also try with both gcc 4.8 and 4.9 (on Linux; on OSX these will be
# excluded).
env:
    matrix:
      - WHICHGCC=4.8 BUILD_FLAGS="USE_CPP11=0"
      - WHICHGCC=4.8 BUILD_FLAGS="USE_CPP11=1 USE_SIMD=sse4.2"
      - WHICHGCC=4.8 BUILD_FLAGS="USE_CPP11=1"
      - WHICHGCC=4.9 BUILD_FLAGS="USE_CPP11=1"
      - WHICHGCC=5 BUILD_FLAGS="USE_CPP11=1"
      - WHICHGCC=4.8 BUILD_FLAGS="USE_CPP11=0" DEBUG=1

# Add-ons: specify apt packages for Linux
addons:
  apt: 
   sources:
      - boost-latest
      - ubuntu-toolchain-r-test
   packages:
      - gcc-4.8
      - g++-4.8
      - gcc-4.9
      - g++-4.9
      - gcc-5
      - g++-5
      - libboost1.55-all-dev
      - libgif-dev
      - libtiff4-dev
      - libopenjpeg-dev
      - libwebp-dev
      - ffmpeg
      - freetype6-dev

cache:
    ccache: true
    apt: true
    directories:
    - $HOME/.ccache
    - $HOME/lgritz/oiio-images
    - $HOME/lgritz/libtiffpic

before_install:
    - if [ $TRAVIS_OS_NAME == osx ] ; then
          export PLATFORM=macosx ;
          sysctl machdep.cpu.features ;
      elif [ $TRAVIS_OS_NAME == linux ] ; then
          export PLATFORM=linux64 ;
          cat /proc/cpuinfo ;
      fi
    - if [ $DEBUG == 1 ] ; then export PLATFORM=${PLATFORM}.debug ; fi
    - echo "Build platform name is $PLATFORM"

install:
    - if [ "$CXX" == "g++" ]; then export CXX="g++-${WHICHGCC}" ; fi
    - export USE_CCACHE=1
    - export CCACHE_CPP2=1
    - if [ $TRAVIS_OS_NAME == osx ] ; then
          src/build-scripts/install_homebrew_deps.bash ;
      elif [ $TRAVIS_OS_NAME == linux ] ; then
          CXX="ccache $CXX" src/build-scripts/build_openexr.bash ;
          export ILMBASE_HOME=$PWD/openexr-install ;
          export OPENEXR_HOME=$PWD/openexr-install ;
      fi
    - src/build-scripts/install_test_images.bash

# before_script:

script:
    - make VERBOSE=1 $BUILD_FLAGS cmakesetup
    - make -j2 $BUILD_FLAGS
    - export OPENIMAGEIOHOME=$PWD/dist/$PLATFORM
    - export DYLD_LIBRARY_PATH=$OPENIMAGEIOHOME/lib:$DYLD_LIBRARY_PATH 
    - export LD_LIBRARY_PATH=$OPENIMAGEIOHOME/lib:$LD_LIBRARY_PATH
    - export PYTHONPATH=$OPENIMAGEIOHOME/python:$PYTHONPATH
    - make $BUILD_FLAGS test


# after_success:

after_failure:
# FIXME: find failed logs, stash them or send them to lg?

branches:
  only:
    - master
    - /RB-/
    - /lg-/

matrix:
    exclude:
      - os: osx
        compiler: gcc
      - os: linux
        compiler: clang
      - os: osx
        compiler: clang
        env: WHICHGCC=4.9
      - os: osx
        compiler: clang
        env: WHICHGCC=4.9 BUILD_FLAGS="USE_CPP11=1"
      - os: osx
        compiler: clang
        env: WHICHGCC=5 BUILD_FLAGS="USE_CPP11=1"
    include:
      - os: linux
        compiler: gcc
        env: WHICHGCC=5 BUILD_FLAGS="USE_CPP11=1 USE_SIMD=avx,f16c"
      - os: linux
        compiler: gcc
        env: WHICHGCC=4.8 BUILD_FLAGS="USE_CPP11=1 USE_SIMD=0"

notifications:
    email:
        recipients:
            - lg@openimageio.org
        on_success: change
        on_failure: always
