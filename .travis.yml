# .travis.yml for OIIO

language: cpp
sudo: false
compiler:
    - clang
    - gcc
os:
    - linux
    - osx
osx_image: xcode7.3
dist: trusty

env:
    # The tests we run for both platforms:
    matrix:
      # Basic C++11 build
      - USE_CPP11=1
      # DEBUG build
      - USE_CPP11=1 DEBUG=1
      # The rest of the tests will be spelled out individually in the
      # 'matrix' section at the bottom of this file.

# Add-ons: specify apt packages for Linux
addons:
  apt: 
   sources:
      - boost-latest
      - ubuntu-toolchain-r-test
   packages:
      - gcc-4.8
      - g++-4.8
      - gcc-5
      - g++-5
      - gcc-6
      - g++-6
      - libboost1.55-all-dev
      - libgif-dev
      - libtiff4-dev
      - libopenjpeg-dev
      - libwebp-dev
      - ffmpeg
      - freetype6-dev
      - libjpeg-turbo8-dev
      # - bzip2
      # - libtinyxml-dev
      # - liblcms2-dev
      # - libyaml-cpp-dev

cache:
    ccache: true
    apt: true
    directories:
      - $HOME/.ccache
      - $PWD/oiio-images
      - $PWD/libtiffpic

before_install:
    - if [ "$WHICHGCC" == "" ]; then export WHICHGCC="4.8" ; fi
    - if [ $TRAVIS_OS_NAME == osx ] ; then
          export PLATFORM=macosx ;
          sysctl machdep.cpu.features ;
      elif [ $TRAVIS_OS_NAME == linux ] ; then
          export PLATFORM=linux64 ;
          cat /proc/cpuinfo ;
      fi
    - if [ "$DEBUG" == 1 ] ; then export PLATFORM=${PLATFORM}.debug ; fi
    - echo "Build platform name is $PLATFORM"

install:
    - if [ "$CXX" == "g++" ]; then export CXX="g++-${WHICHGCC}" ; fi
    - export USE_CCACHE=1
    - export CCACHE_CPP2=1
    - if [ $TRAVIS_OS_NAME == osx ] ; then
          src/build-scripts/install_homebrew_deps.bash ;
      elif [ $TRAVIS_OS_NAME == linux ] ; then
          CXX="ccache $CXX" CCACHE_CPP2=1 src/build-scripts/build_openexr.bash ;
          export ILMBASE_HOME=$PWD/openexr-install ;
          export OPENEXR_HOME=$PWD/openexr-install ;
      fi
    - src/build-scripts/install_test_images.bash

# before_script:

script:
    - make VERBOSE=1 $BUILD_FLAGS cmakesetup
    - make -j2 $BUILD_FLAGS
    - export OPENIMAGEIOHOME=$PWD/dist/$PLATFORM
    - export DYLD_LIBRARY_PATH=$OPENIMAGEIOHOME/lib:$DYLD_LIBRARY_PATH 
    - export LD_LIBRARY_PATH=$OPENIMAGEIOHOME/lib:$LD_LIBRARY_PATH
    - export OIIO_LIBRARY_PATH=$OPENIMAGEIOHOME/lib
    - echo "OIIO_LIBRARY_PATH is ${OIIO_LIBRARY_PATH}"
    - echo "list of library path:"
    - ls -R $OIIO_LIBRARY_PATH
    - export PYTHONPATH=$OPENIMAGEIOHOME/python:$PYTHONPATH
    - make $BUILD_FLAGS test


after_success:
    - if [ "$CODECOV" == 1 ] ; then bash <(curl -s https://codecov.io/bash) ; fi

after_failure:
# FIXME: find failed logs, stash them or send them to lg?

branches:
  only:
    - master
    - /RB-/
    - /lg-/

matrix:
    fast_finish: true
    exclude:
      - os: osx
        compiler: gcc
      - os: linux
        compiler: clang

    include:
    # Make sure we can still build C++03, both platforms
      - os: linux
        dist: trusty
        compiler: gcc
        env: USE_CPP11=0
      - os: osx
        compiler: clang
        env: USE_CPP11=0
    # Build with EMBEDPLUGINS=0, both platforms.
      # FIXME: doesn't work yet on Travis
      # - os: linux
      #   dist: trusty
      #   compiler: gcc
      #   env: EMBEDPLUGINS=0
      # FIXME: don't have OSX EMBEDPLUGINS=0 working yet on Travis (though
      # it works fine on my laptop).
      # - os: osx
      #   compiler: clang
      #   env: EMBEDPLUGINS=0
    # Build with a higher SIMD level (SSE4.2).
      - os: linux
        dist: trusty
        compiler: gcc
        env: USE_SIMD=sse4.2
      - os: osx
        compiler: clang
        env: USE_SIMD=sse4.2
    # Test LINKSTATIC on both platforms. This is incomplete and to make it
    # work we still need to disable a bunch of specific plugins.
      # FIXME: Don't have LINKSTATIC working on Travis for Linux, it's
      # complaining about PIC issues.
      # - os: linux
      #   dist: trusty
      #   compiler: gcc
      #   env: LINKSTATIC=1 USE_FFMPEG=0 USE_OCIO=0 USE_OPENCV=0 MY_CMAKE_FLAGS="-DUSE_fPIC=1"
      - os: osx
        compiler: clang
        env: LINKSTATIC=1 USE_FFMPEG=0 USE_OCIO=0 USE_OPENCV=0
    # Linux only: test gcc 6 (catch new warnings hot off the presses) and
    # also use a higher SIMD level, avx and f16c, to make sure all is well.
    # TravisCI's OSX images don't yet support avx/f16c, so we only do this
    # on Linux for now, but eventually we'll want to separate these concerns
    # into separate tests.
      - os: linux
        dist: trusty
        compiler: gcc
        env: WHICHGCC=6 USE_SIMD=avx,f16c
    # Linux only: test gcc 5
      - os: linux
        dist: trusty
        compiler: gcc
        env: WHICHGCC=5
    # One more, just for the heck of it, turn all SIMD off, and also make
    # sure we're falling back on libjpeg, not jpeg-turbo.  I guess this
    # should/could be both platforms, but in the interest of making the
    # tests go faster, don't bother doing it on OSX.
      - os: linux
        dist: trusty
        compiler: gcc
        env: USE_SIMD=0 USE_JPEGTURBO=0

notifications:
    email:
        recipients:
            - lg@openimageio.org
        on_success: change
        on_failure: always
