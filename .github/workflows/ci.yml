# Copyright 2008-present Contributors to the OpenImageIO project.
# SPDX-License-Identifier: BSD-3-Clause
# https://github.com/OpenImageIO/oiio

name: CI

on:
  push:
    # Skip jobs when only documentation files are changed
    paths-ignore:
      - '**.md'
      - '**.rst'
  pull_request:
    paths-ignore:
      - '**.md'
      - '**.rst'
  schedule:
    # Full nightly build
    - cron: "0 8 * * *"


jobs:

  aswf:
    name: "VFX${{matrix.vfxyear}} ${{matrix.desc}}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - desc: gcc6/C++14 py2.7 boost1.66 exr2.3 ocio1.1
            nametag: linux-vfx2019
            os: ubuntu-latest
            vfxyear: 2019
            cxx_std: 14
            python_ver: 2.7
            simd: sse4.2
            fmt_ver: 6.1.2
            pybind11_ver: v2.4.2
            setenvs: export PUGIXML_VERSION=v1.9
          - desc: gcc6/C++14 py3.7 boost1.70 exr2.4 ocio1.1
            nametag: linux-vfx2020
            os: ubuntu-latest
            vfxyear: 2020
            cxx_std: 14
            python_ver: 3.7
            simd: avx
            fmt_ver: 7.0.1
            pybind11_ver: v2.5.0
            setenvs: export PUGIXML_VERSION=v1.9 WEBP_VERSION=v1.1.0
          - desc: gcc9/C++17 py3.7 boost1.73 exr2.5 ocio2.0
            nametag: linux-vfx2021
            os: ubuntu-latest
            vfxyear: 2021
            cxx_std: 17
            python_ver: 3.7
            simd: "avx2,f16c"
            fmt_ver: 7.1.0
            pybind11_ver: v2.7.0
            setenvs: export PUGIXML_VERSION=v1.9 WEBP_VERSION=v1.1.0
          - desc: clang10/C++14 avx2 exr2.5 ocio2.0
            nametag: linux-clang10-cpp14
            os: ubuntu-latest
            vfxyear: 2021
            vfxsuffix: -clang10
            cc_compiler: clang
            cxx_compiler: clang++
            cxx_std: 14
            pybind11_ver: v2.6.2
            python_ver: 3.7
            simd: "avx2,f16c"
            fmt_ver: 8.1.1
          - desc: gcc9/C++17 py39 boost1.76 exr3.1 ocio2.1
            nametag: linux-vfx2022
            os: ubuntu-latest
            vfxyear: 2022
            vfxsuffix: -clang11
            cxx_std: 17
            python_ver: 3.9
            simd: "avx2,f16c"
            fmt_ver: 8.1.1
            pybind11_ver: v2.9.0
          - desc: clang13/C++17 py39 avx2 exr3.1 ocio2.1
            nametag: linux-clang13-cpp17
            os: ubuntu-latest
            vfxyear: 2022
            vfxsuffix: -clang13
            cc_compiler: clang
            cxx_compiler: clang++
            cxx_std: 17
            python_ver: 3.9
            simd: "avx2,f16c"
            fmt_ver: 8.1.1
            pybind11_ver: v2.8.1
          - desc: icc/C++17 py3.9 boost1.76 exr3.1 ocio2.1 qt5.15
            nametag: linux-vfx2022-icc
            os: ubuntu-latest
            vfxyear: 2022
            cxx_std: 17
            python_ver: 3.9
            # simd: "avx2,f16c"
            fmt_ver: 7.1.3
            # icc MUST use this older FMT version
            pybind11_ver: v2.9.0
            setenvs: export USE_ICC=1 USE_OPENVDB=0
          - desc: icx/C++17 py3.9 boost1.76 exr3.1 ocio2.1 qt5.15
            nametag: linux-vfx2022-icx
            os: ubuntu-latest
            vfxyear: 2022
            cc_compiler: icx
            cxx_compiler: icpx
            cxx_std: 17
            python_ver: 3.9
            simd: "avx2,f16c"
            pybind11_ver: v2.9.0
            setenvs: export USE_OPENVDB=0
          - desc: sanitizers
            nametag: sanitizer
            os: ubuntu-latest
            vfxyear: 2022
            cxx_std: 17
            python_ver: 3.9
            setenvs: export SANITIZE=address USE_PYTHON=0
          - desc: oldest/hobbled gcc6.3/C++14 py2.7 boost-1.66 exr-2.3 no-sse no-ocio
            # Oldest versions of the dependencies that we can muster, and various
            # things disabled (no SSE, OCIO, or OpenCV, don't embed plugins).
            nametag: linux-oldest
            os: ubuntu-latest
            vfxyear: 2019
            cxx_std: 14
            fmt_ver: 6.1.2
            openexr_ver: v2.3.0
            pybind11_ver: v2.4.2
            python_ver: 2.7
            simd: 0
            setenvs: export  EMBEDPLUGINS=0
                             PTEX_VERSION=v2.3.1
                             USE_JPEGTURBO=0
                             USE_OPENCOLORIO=0
                             USE_OPENCV=0
                             WEBP_VERSION=v1.0.0
            depcmds: sudo rm -rf /usr/local/include/OpenEXR

    runs-on: ${{ matrix.os }}
    container:
      image: aswf/ci-osl:${{matrix.vfxyear}}${{matrix.vfxsuffix}}
    env:
      CXX: ${{matrix.cxx_compiler}}
      CC: ${{matrix.cc_compiler}}
      CMAKE_CXX_STANDARD: ${{matrix.cxx_std}}
      USE_SIMD: ${{matrix.simd}}
      FMT_VERSION: ${{matrix.fmt_ver}}
      OPENEXR_VERSION: ${{matrix.openexr_ver}}
      PYBIND11_VERSION: ${{matrix.pybind11_ver}}
      PYTHON_VERSION: ${{matrix.python_ver}}
    steps:
      - uses: actions/checkout@v2
      - name: Prepare ccache timestamp
        id: ccache_cache_keys
        run: echo "::set-output name=date::`date -u +'%Y-%m-%dT%H:%M:%SZ'`"
      - name: ccache
        id: ccache
        uses: actions/cache@v2
        with:
          path: /tmp/ccache
          key: ${{github.job}}-${{matrix.nametag}}-${{steps.ccache_cache_keys.outputs.date}}
          restore-keys: ${{github.job}}-
      - name: Build setup
        run: |
            ${{matrix.setenvs}}
            src/build-scripts/ci-startup.bash
      - name: Dependencies
        run: |
            ${{matrix.depcmds}}
            src/build-scripts/gh-installdeps.bash
      - name: Build
        run: src/build-scripts/ci-build.bash
      - name: Testsuite
        if: matrix.skip_tests != '1'
        run: src/build-scripts/ci-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: oiio-${{github.job}}-${{matrix.nametag}}
          path: |
            build/*.cmake
            build/CMake*
            build/testsuite/*/*.*
            !build/testsuite/oiio-images
            !build/testsuite/openexr-images
            !build/testsuite/fits-images
            !build/testsuite/j2kp4files_v1_5


  ubuntu:
    name: "Ubuntu ${{matrix.desc}}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - desc: latest releases gcc10 C++17 avx2 exr3.1 ocio2.1
            nametag: linux-latest-releases
            os: ubuntu-20.04
            cxx_compiler: g++-10
            cxx_std: 17
            fmt_ver: 8.1.1
            openexr_ver: v3.1.5
            pybind11_ver: v2.9.2
            python_ver: 3.8
            simd: avx2,f16c
            setenvs: export LIBRAW_VERSION=0.20.2
                            LIBTIFF_VERSION=v4.3.0
                            OPENCOLORIO_VERSION=v2.1.1
                            OPENIMAGEIO_OPTIONS="openexr:core=1"
                            OPENJPEG_VERSION=v2.4.0
                            PTEX_VERSION=v2.4.0
                            PUGIXML_VERSION=v1.11.4
                            USE_OPENVDB=0
                            WEBP_VERSION=v1.2.1
                            # The installed OpenVDB has a TLS conflict with Python 3.8
          - desc: bleeding edge gcc11 C++20 py38 OCIO/libtiff/exr-master boost1.71 avx2
            nametag: linux-bleeding-edge
            os: ubuntu-20.04
            cxx_compiler: g++-11
            cxx_std: 20
            fmt_ver: master
            openexr_ver: main
            pybind11_ver: master
            python_ver: 3.8
            simd: avx2,f16c
            setenvs: export LIBRAW_VERSION=master
                            LIBTIFF_VERSION=master
                            OPENCOLORIO_VERSION=main
                            OPENIMAGEIO_OPTIONS="openexr:core=1"
                            OPENJPEG_VERSION=master
                            PTEX_VERSION=main
                            PUGIXML_VERSION=master
                            USE_OPENVDB=0
                            WEBP_VERSION=master
                            # The installed OpenVDB has a TLS conflict with Python 3.8
          - desc: clang14 C++20 avx2 exr3.1 ocio2.1
            nametag: linux-clang14
            os: ubuntu-20.04
            cxx_compiler: clang++
            cc_compiler: clang
            cxx_std: 20
            fmt_ver: 8.1.1
            openexr_ver: v3.1.5
            pybind11_ver: v2.9.2
            python_ver: 3.8
            simd: avx2,f16c
            setenvs: export LLVM_VERSION=14.0.0
                            OPENCOLORIO_VERSION=v2.1.1
                            OPENIMAGEIO_OPTIONS="openexr:core=1"
                            USE_OPENVDB=0
                            # The installed OpenVDB has a TLS conflict with Python 3.8
          - desc: debug gcc7/C++14, sse4.2, exr2.4
            nametag: linux-gcc7-cpp14-debug
            os: ubuntu-18.04
            cxx_compiler: g++-7
            cxx_std: 14
            python_ver: 2.7
            simd: sse4.2
            openexr_ver: v2.4.3
            pybind11_ver: v2.6.2
            setenvs: export CMAKE_BUILD_TYPE=Debug PUGIXML_VERSION=v1.9
          - desc: gcc8 C++17 avx exr2.5
            nametag: linux-gcc8
            os: ubuntu-18.04
            cxx_compiler: g++-8
            cxx_std: 17
            openexr_ver: v2.5.8
            pybind11_ver: v2.5.0
            simd: avx
          - desc: static libs gcc7 C++14 exr2.4
            nametag: linux-static
            os: ubuntu-18.04
            cxx_compiler: g++-7
            cxx_std: 14
            openexr_ver: v2.4.3
            pybind11_ver: v2.6.2
            setenvs: export BUILD_SHARED_LIBS=OFF
            depcmds: |
              sudo rm -rf /usr/local/include/OpenEXR
              sudo rm -rf /usr/local/lib64/cmake/{IlmBase,OpenEXR}

    runs-on: ${{ matrix.os }}
    env:
      CXX: ${{matrix.cxx_compiler}}
      CC: ${{matrix.cc_compiler}}
      CMAKE_CXX_STANDARD: ${{matrix.cxx_std}}
      USE_SIMD: ${{matrix.simd}}
      FMT_VERSION: ${{matrix.fmt_ver}}
      OPENEXR_VERSION: ${{matrix.openexr_ver}}
      PYBIND11_VERSION: ${{matrix.pybind11_ver}}
      PYTHON_VERSION: ${{matrix.python_ver}}
    steps:
      - uses: actions/checkout@v2
      - name: Prepare ccache timestamp
        id: ccache_cache_keys
        run: echo "::set-output name=date::`date -u +'%Y-%m-%dT%H:%M:%SZ'`"
      - name: ccache
        id: ccache
        uses: actions/cache@v2
        with:
          path: /tmp/ccache
          key: ${{github.job}}-${{matrix.nametag}}-${{ steps.ccache_cache_keys.outputs.date }}
          restore-keys: ${{github.job}}-
      - name: Build setup
        run: |
            ${{matrix.setenvs}}
            src/build-scripts/ci-startup.bash
      - name: Dependencies
        run: |
            ${{matrix.depcmds}}
            src/build-scripts/gh-installdeps.bash
      - name: Build
        run: src/build-scripts/ci-build.bash
      - name: Testsuite
        if: matrix.skip_tests != '1'
        run: src/build-scripts/ci-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: oiio-${{github.job}}-${{matrix.nametag}}
          path: |
            build/*.cmake
            build/CMake*
            build/testsuite/*/*.*
            !build/testsuite/oiio-images
            !build/testsuite/openexr-images
            !build/testsuite/fits-images
            !build/testsuite/j2kp4files_v1_5


  macos:
    name: "${{matrix.os}} appleclang${{matrix.aclang}}/C++${{matrix.cxx_std}} py${{matrix.python_ver}} ${{matrix.desc}} boost1.76 exr3.1 ocio2.1"
    strategy:
      matrix:
        include:
          - desc: MacOS-10.15
            os: macos-10.15
            cxx_std: 14
            python_ver: 3.8
            aclang: 12
          - desc: MacOS-11
            os: macos-11
            cxx_std: 17
            python_ver: 3.9
            aclang: 13
    runs-on: ${{ matrix.os }}
    env:
      CC: clang
      CXX: clang++
      CMAKE_CXX_STANDARD: ${{ matrix.cxx_std }}
      PYTHON_VERSION: ${{ matrix.python_ver }}
    steps:
      - uses: actions/checkout@v2
      - name: Prepare ccache timestamp
        id: ccache_cache_keys
        run: echo "::set-output name=date::`date -u +'%Y-%m-%dT%H:%M:%SZ'`"
      - name: ccache
        id: ccache
        uses: actions/cache@v2
        with:
          path: /Users/runner/.ccache
          key: ${{github.job}}-${{matrix.os}}-${{steps.ccache_cache_keys.outputs.date}}
          restore-keys: ${{github.job}}-
      - name: Build setup
        run: |
            ${{matrix.setenvs}}
            src/build-scripts/ci-startup.bash
      - name: Dependencies
        run: |
            src/build-scripts/install_homebrew_deps.bash
            src/build-scripts/install_test_images.bash
            ${{matrix.depcmds}}
      - name: Build
        run: |
            export PYTHONPATH=/usr/local/lib/python${PYTHON_VERSION}/site-packages:$PYTHONPATH
            src/build-scripts/ci-build.bash
      - name: Testsuite
        run: src/build-scripts/ci-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: oiio-${{github.job}}
          path: |
            build/*.cmake
            build/CMake*
            build/testsuite/*/*.*
            !build/testsuite/oiio-images
            !build/testsuite/openexr-images
            !build/testsuite/fits-images
            !build/testsuite/j2kp4files_v1_5


  windows:
    name: "${{matrix.desc}} VS${{matrix.vsver}}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - desc: windows-2019
            os: windows-2019
            vsver: 2019
            generator: "Visual Studio 16 2019"
            openexr_ver: v2.5.8
            python_ver: 3.7
            simd: sse4.2
          # - desc: windows-2022
          #   os: windows-2022
          #   vsver: 2022
          #   generator: "Visual Studio 17 2022"
          #   openexr_ver: main
          #   # v3.1.4
          #   python_ver: 3.7
          #   simd: sse4.2
    runs-on: ${{ matrix.os }}
    env:
      PYTHON_VERSION: ${{matrix.python_ver}}
      CMAKE_GENERATOR: ${{matrix.generator}}
      OPENEXR_VERSION: ${{matrix.openexr_ver}}
      USE_SIMD: ${{matrix.simd}}
      CTEST_ARGS: "--timeout 120 --repeat after-timeout:6"
    steps:
      - uses: actions/checkout@v2
      - name: Setup Nuget.exe
        uses: nuget/setup-nuget@v1
      - name: Build setup
        shell: bash
        run: |
            ${{matrix.setenvs}}
            src/build-scripts/ci-startup.bash
      - name: Dependencies
        shell: bash
        run: src/build-scripts/gh-win-installdeps.bash
      - name: Build
        shell: bash
        run: src/build-scripts/ci-build.bash
      - name: Testsuite
        shell: bash
        run: src/build-scripts/ci-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: oiio-${{github.job}}-VS${{matrix.vsver}}
          path: |
            build/*.cmake
            build/CMake*
            build/testsuite/*/*.*
            !build/testsuite/oiio-images
            !build/testsuite/openexr-images
            !build/testsuite/fits-images
            !build/testsuite/j2kp4files_v1_5


  clang-format:
    # Test formatting. This test entry doesn't do a full build, it just runs
    # clang-format on everything, and passes if nothing is misformatted.
    # Upon failure, the build artifact will be the full source code with the
    # formatting fixed (diffs will also appear in the console output).
    name: "clang-format verification"
    runs-on: ubuntu-20.04
    container:
      image: aswf/ci-osl:2022-clang12
    env:
      BUILDTARGET: clang-format
      PYTHON_VERSION: 3.9
    steps:
      - uses: actions/checkout@v2
      - name: Build setup
        run: src/build-scripts/ci-startup.bash
      - name: Dependencies
        run: src/build-scripts/gh-installdeps.bash
      - name: Build
        run: src/build-scripts/ci-build.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: src/*/*.{cpp,h}
