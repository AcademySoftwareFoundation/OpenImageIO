# Copyright 2008-present Contributors to the OpenImageIO project.
# SPDX-License-Identifier: BSD-3-Clause
# https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md

name: CI

on:
  push:
    # Skip jobs when only documentation files are changed
    paths-ignore:
      - '**.md'
      - '**.rst'
  pull_request:
    paths-ignore:
      - '**.md'
      - '**.rst'
  schedule:
    # Full nightly build
    - cron: "0 8 * * *"


jobs:
  linux-gcc48:
    name: "Linux 2017-ish: gcc4.8/C++11 py2.7 boost-1.66 exr-2.3"
    runs-on: ubuntu-latest
    container:
      image: aswf/ci-osl:2019
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: /usr/bin/g++
          CC: /usr/bin/gcc
          CMAKE_CXX_STANDARD: 11
          MY_CMAKE_FLAGS: -DBUILD_FMT_VERSION=6.2.1
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  vfxplatform-2019:
    name: "Linux VFX Platform 2019: gcc6/C++14 py2.7 boost-1.66 exr-2.3"
    runs-on: ubuntu-latest
    container:
      image: aswf/ci-osl:2019
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++
          CC: gcc
          CMAKE_CXX_STANDARD: 14
          USE_SIMD: sse4.2
          PUGIXML_VERSION: v1.9
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  vfxplatform-2020:
    name: "Linux VFX Platform 2020: gcc6/C++14 py3.7 boost-1.70 exr-2.4"
    runs-on: ubuntu-latest
    container:
      image: aswf/ci-osl:2020
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++
          CC: gcc
          CMAKE_CXX_STANDARD: 14
          PYTHON_VERSION: 3.7
          USE_SIMD: avx
          WEBP_VERSION: v1.1.0
          MY_CMAKE_FLAGS: -DBUILD_FMT_VERSION=7.0.1
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  vfxplatform-2021:
    # Test what's anticipated to be VFX Platform 2021 -- mainly, that means
    # gcc9 and C++17. This test currently uses the latest OpenEXR release
    # 2.5, though eventually 2021 will feature OpenEXR 3.0 when complete.
    name: "Linux VFX Platform 2021: gcc9/C++17 py3.7 boost-1.70 exr-2.5"
    runs-on: ubuntu-18.04
    container:
      image: aswf/ci-osl:2021
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++
          CC: gcc
          CMAKE_CXX_STANDARD: 17
          PYTHON_VERSION: 3.7
          USE_SIMD: avx2,f16c
          OPENEXR_VERSION: v2.5.3
          WEBP_VERSION: v1.1.0
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  vfxplatform-2021-exrmaster:
    # Test what's anticipated to be VFX Platform 2021 -- mainly, that means
    # gcc9 and C++17, and also the in-progress openexr/imath 3.0.
    name: "Linux VFX Platform 2021: gcc9/C++17 py3.7 boost-1.70 exr-3.0"
    runs-on: ubuntu-18.04
    container:
      image: aswf/ci-osl:2021
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++
          CC: gcc
          CMAKE_CXX_STANDARD: 17
          PYTHON_VERSION: 3.7
          USE_SIMD: avx2,f16c
          OPENEXR_VERSION: master
        run: |
            sudo rm -rf /usr/local/include/OpenEXR
            sudo rm -rf /usr/local/lib64/cmake/{IlmBase,OpenEXR}
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  linux-gcc7-cpp14-debug:
    # Test against gcc7, and also at the same time, do a Debug build.
    name: "Linux debug gcc7/C++14, sse4.2, exr2.4"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++-7
          CMAKE_CXX_STANDARD: 14
          USE_SIMD: sse4.2
          OPENEXR_VERSION: v2.4.0
          DEBUG: 1
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  linux-gcc8:
    # Test against gcc8.
    name: "Linux gcc8: gcc8 C++17 avx exr2.5"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++-8
          CMAKE_CXX_STANDARD: 17
          USE_SIMD: avx
          OPENEXR_VERSION: v2.5.3
          PYBIND11_VERSION: v2.5.0
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  linux-latest-releases:
    # Test against latest supported releases of toolchain and dependencies.
    name: "Linux latest releases: gcc10 C++17 avx2 exr2.5"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++-10
          CMAKE_CXX_STANDARD: 17
          USE_SIMD: avx2,f16c
          OPENEXR_VERSION: v2.5.3
          PYBIND11_VERSION: v2.6.1
          LIBRAW_VERSION: 0.20.2
          PUGIXML_VERSION: v1.11.1
          WEBP_VERSION: v1.1.0
          MY_CMAKE_FLAGS: -DBUILD_FMT_VERSION=7.1.3
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  linux-bleeding-edge:
    # Test against development master for relevant dependencies, latest
    # supported releases of everything else.
    name: "Linux bleeding edge: gcc10 C++17 avx2 OCIO/libtiff/exr master"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++-10
          CMAKE_CXX_STANDARD: 17
          USE_SIMD: avx2,f16c
          OPENEXR_VERSION: master
          OPENCOLORIO_VERSION: master
          LIBTIFF_VERSION: master
          PYBIND11_VERSION: master
          LIBRAW_VERSION: master
          PUGIXML_VERSION: master
          WEBP_VERSION: master
          MY_CMAKE_FLAGS: -DBUILD_FMT_VERSION=master
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  linux-oldest:
    # Oldest versions of the dependencies that we can muster, and various
    # things disabled (no SSE, OCIO, or OpenCV, don't embed plugins).
    name: "Linux oldest/hobbled: gcc4.8/C++11 py2.7 boost-1.66 exr-2.2 no-sse no-ocio"
    runs-on: ubuntu-latest
    container:
      image: aswf/ci-osl:2019
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: /usr/bin/g++
          CC: /usr/bin/gcc
          CMAKE_CXX_STANDARD: 11
          USE_SIMD: 0
          USE_JPEGTURBO: 0
          USE_OPENCOLORIO: 0
          USE_OPENCV: 0
          EMBEDPLUGINS: 0
          OPENEXR_VERSION: v2.2.1
          PYBIND11_VERSION: v2.4.2
          WEBP_VERSION: v1.0.0
          MY_CMAKE_FLAGS: -DBUILD_FMT_VERSION=6.1.2
        run: |
            sudo rm -rf /usr/local/include/OpenEXR
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  macos-py38:
    name: "Mac py38"
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: clang++
          PYTHON_VERSION: 3.8
          CMAKE_CXX_STANDARD: 14
          ENABLE_FIELD3D: OFF
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/install_homebrew_deps.bash
            src/build-scripts/install_test_images.bash
            export PYTHONPATH=/usr/local/lib/python${PYTHON_VERSION}/site-packages:$PYTHONPATH
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  windows-vs2019:
    name: "Windows VS2019"
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
      - name: Setup Nuget.exe
        uses: nuget/setup-nuget@v1
      - name: all
        shell: bash
        env:
          PYTHON_VERSION: 3.6
          CMAKE_GENERATOR: "Visual Studio 16 2019"
          OPENEXR_VERSION: v2.4.1
          SKIP_TESTS: 1
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-win-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  windows-vs2017:
    name: "Windows VS2017"
    runs-on: windows-2016
    steps:
      - uses: actions/checkout@v2
      - name: Setup Nuget.exe
        uses: nuget/setup-nuget@v1
      - name: all
        shell: bash
        env:
          PYTHON_VERSION: 3.6
          CMAKE_GENERATOR: "Visual Studio 15 2017 Win64"
          OPENEXR_VERSION: v2.4.1
          SKIP_TESTS: 1
          #MY_CMAKE_FLAGS: -DUSE_PYTHON=0
          USE_NINJA: 0
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-win-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  sanitizer:
    # Run sanitizers.
    name: "Sanitizers"
    runs-on: ubuntu-18.04
    container:
      image: aswf/ci-osl:2020
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++
          CC: gcc
          CMAKE_CXX_STANDARD: 14
          PYTHON_VERSION: 3.7
          USE_PYTHON: 0
          SANITIZE: address
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  linux-clang:
    # Test compiling with clang on Linux.
    name: "Linux clang10: clang10 C++14 avx2 exr2.4"
    runs-on: ubuntu-18.04
    container:
      image: aswf/ci-osl:2021
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: clang++
          CMAKE_CXX_STANDARD: 14
          PYTHON_VERSION: 3.7
          USE_SIMD: avx2,f16c
          OPENCOLORIO_VERSION: 1c624651b7
          # Pick an OCIO commit that includes a warning fix we need for clang
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  linux-static:
    # Test building static libs.
    name: "Linux static libs: gcc7 C++14 exr2.4"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++-7
          CMAKE_CXX_STANDARD: 14
          BUILD_SHARED_LIBS: OFF
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  clang-format:
    # Test formatting. This test entry doesn't do a full build, it just runs
    # clang-format on everything, and passes if nothing is misformatted.
    # Upon failure, the build artifact will be the full source code with the
    # formatting fixed (diffs will also appear in the console output).
    name: "clang-format verification"
    runs-on: ubuntu-18.04
    container:
      image: aswf/ci-osl:2021-clang10
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          BUILDTARGET: clang-format
          PYTHON_VERSION: 3.7
          SKIP_TESTS: 1
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: src/*/*.{cpp,h}
