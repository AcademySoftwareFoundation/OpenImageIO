# Copyright 2008-present Contributors to the OpenImageIO project.
# SPDX-License-Identifier: BSD-3-Clause
# https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md

name: CI
on: [push, pull_request]


jobs:
  linux-gcc6-cpp11:
    name: "Linux VFX 2019-ish: gcc6/C++11, sse2, exr2.3"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: all
        env:
          CXX: g++-6
          CMAKE_CXX_STANDARD: 11
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash

  linux-gcc6-cpp14:
    name: "Linux VFX 2019-ish: gcc6/C++14, sse4.2, exr2.3"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: all
        env:
          CXX: g++-6
          CMAKE_CXX_STANDARD: 14
          USE_SIMD: sse4.2
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash

  linux-debug-gcc7:
    name: "Linux debug, gcc7, C++14, avx, exr2.3"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: all
        env:
          CXX: g++-7
          CMAKE_CXX_STANDARD: 14
          USE_SIMD: avx
          DEBUG: 1
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash

  linux-gcc8:
    name: "Linux next: gcc8, C++14, avx2, exr2.4"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: all
        env:
          CXX: g++-8
          CMAKE_CXX_STANDARD: 14
          USE_SIMD: avx2,f16c
          OPENEXR_BRANCH: v2.4.0
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash

  linux-bleeding:
    name: "Linux bleeding edge: gcc9, C++17, avx2, exr 2.4"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: all
        env:
          CXX: g++-9
          CMAKE_CXX_STANDARD: 17
          USE_SIMD: avx2,f16c
          OPENEXR_BRANCH: v2.4.0
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash

  # PITA go get GitHub Actions CI on Mac to do python 2 and I'm just
  # too lazy to figure it out right now.
  #  macos-py27:
  #    name: "Mac py27"
  #    runs-on: macOS-latest
  #    steps:
  #      - uses: actions/checkout@v1
  #      - name: all
  #        env:
  #          CXX: clang++
  #          PYTHON_VERSION: 2.7
  #        run: |
  #            source src/build-scripts/ci-startup.bash
  #            source src/build-scripts/install_homebrew_deps.bash
  #            src/build-scripts/install_test_images.bash
  #            source src/build-scripts/ci-build-and-test.bash
  macos-py37:
    name: "Mac py37"
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v1
      - name: all
        env:
          CXX: clang++
          PYTHON_VERSION: 3.7
          ENABLE_WEBP: OFF
          #  ^^ webp seems broken on GH CI Mac. Investigate later.
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/install_homebrew_deps.bash
            src/build-scripts/install_test_images.bash
            source src/build-scripts/ci-build-and-test.bash

  windows:
    name: "Windows"
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v1
      - name: Setup Nuget.exe
        uses: warrenbuckley/Setup-Nuget@v1
      - name: all
        shell: bash
        env:
          PYTHON_VERSION: 3.6
          CMAKE_GENERATOR: "Visual Studio 16 2019"
          OPENEXR_BRANCH: v2.4.0
          SKIP_TESTS: 1
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-win-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash

  sanitizer:
    name: "Sanitizers"
    runs-on: ubuntu-18.04
    if: github.event_name == 'pull_request' || contains(github.ref, 'san') || contains(github.ref, 'RB') || contains(github.ref, 'release') || contains(github.ref, 'master') || contains(github.ref, 'gh')
    steps:
      - uses: actions/checkout@v1
      #- uses: docker://aswfstaging/ci-base:2019
      - name: all
        env:
          CXX: g++-7
          CMAKE_CXX_STANDARD: 14
          SANITIZE: address
          USE_PYTHON: 0
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash

  linux-clang:
    name: "Linux clang: clang9, C++14, avx2, exr2.4"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: all
        env:
          CXX: clang++
          LLVM_VERSION: 9.0.0
          CMAKE_CXX_STANDARD: 14
          USE_SIMD: avx2,f16c
          OPENEXR_BRANCH: v2.4.0
          OCIO_BRANCH: 1c624651b7
          # Pick an OCIO commit that includes a warning fix we need for clang
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash

  linux-static:
    name: "Linux static libs: gcc7, C++14, exr2.3"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      #- uses: docker://aswfstaging/ci-base:2019
      - name: all
        env:
          CXX: g++-7
          CMAKE_CXX_STANDARD: 14
          BUILD_SHARED_LIBS: OFF
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash

  clang-format:
    name: "clang-format verification"
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v1
      - name: all
        env:
          CXX: clang++
          BUILDTARGET: clang-format
          SKIP_TESTS: 1
          BUILD_MISSING_DEPS: 0
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/install_homebrew_deps.bash
            source src/build-scripts/ci-build-and-test.bash

  # I want to build a gcc48 version, but it's really hard to do, all the
  # libraries are built against gcc 6+ and have incompatibilites (incluing
  # boost).
  #
  # linux-gcc48:
  #   name: "Linux VP 2017-ish: gcc4.8, C++11, sse4.2, exr2.3"
  #   runs-on: ubuntu-16.04
  #   steps:
  #     - uses: actions/checkout@v1
  #     - name: all
  #       env:
  #         CXX: g++-4.8
  #         CMAKE_CXX_STANDARD: 11
  #         USE_LIBHEIF: 0
  #       run: |
  #           source src/build-scripts/ci-startup.bash
  #           source src/build-scripts/gh-installdeps.bash
  #           source src/build-scripts/ci-build-and-test.bash
