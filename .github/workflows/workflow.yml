# Copyright 2008-present Contributors to the OpenImageIO project.
# SPDX-License-Identifier: BSD-3-Clause
# https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md

name: CI

on:
  push:
    # Skip jobs when only documentation files are changed
    paths-ignore:
      - '**.md'
      - '**.rst'
  pull_request:
    paths-ignore:
      - '**.md'
      - '**.rst'
  schedule:
    # Full nightly build
    - cron: "0 0 * * *"


jobs:
  vfxplatform-2019:
    name: "Linux VFX Platform 2019: gcc6/C++14 py2.7 boost-1.66 exr-2.3"
    runs-on: ubuntu-latest
    container:
      #image: aswf/ci-base:2019
      image: aswf/ci-vfxall:2019
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++
          CC: gcc
          CMAKE_CXX_STANDARD: 14
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash

  linux-gcc48:
    name: "Linux 2017-ish: gcc4.8/C++11 py2.7 boost-1.66 exr-2.3"
    runs-on: ubuntu-latest
    container:
      #image: aswf/ci-base:2019
      image: aswf/ci-vfxall:2019
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: /usr/bin/g++
          CC: /usr/bin/gcc
          CMAKE_CXX_STANDARD: 11
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash

  linux-gcc7-cpp14-debug:
    name: "Linux debug gcc7/C++14, sse4.2, exr2.4"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++-7
          CMAKE_CXX_STANDARD: 14
          USE_SIMD: sse4.2
          DEBUG: 1
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash

  linux-gcc8:
    name: "Linux next/VFXP2021: gcc8 C++17 avx exr2.4"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++-8
          CMAKE_CXX_STANDARD: 17
          USE_SIMD: avx
          OPENEXR_BRANCH: v2.4.1
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash

  linux-bleeding-edge:
    name: "Linux bleeding edge: gcc9 C++17 avx2 OCIO/libtiff/exr master"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++-9
          CMAKE_CXX_STANDARD: 17
          USE_SIMD: avx2,f16c
          OPENEXR_BRANCH: master
          OCIO_BRANCH: master
          LIBTIFF_BRANCH: master
          PYBIND11_BRANCH: master
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash

  linux-oldest:
    # Oldest versions of the dependencies that we can muster, and various
    # things disabled (no SSE, no OCIO available, don't embed plugins)
    name: "Linux oldest/hobbled: gcc4.8/C++11 py2.7 boost-1.66 exr-2.2 no-sse no-ocio"
    runs-on: ubuntu-latest
    container:
      #image: aswf/ci-base:2019
      image: aswf/ci-vfxall:2019
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: /usr/bin/g++
          CC: /usr/bin/gcc
          CMAKE_CXX_STANDARD: 11
          USE_SIMD: 0
          USE_JPEGTURBO: 0
          USE_OPENCOLORIO: 0
          EMBEDPLUGINS: 0
          OPENEXR_BRANCH: v2.2.0
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash

  macos-py37:
    name: "Mac py37"
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: clang++
          PYTHON_VERSION: 3.7
          ENABLE_WEBP: OFF
          #  ^^ webp seems broken on GH CI Mac. Investigate later.
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/install_homebrew_deps.bash
            pip3.7 install numpy
            src/build-scripts/install_test_images.bash
            export PYTHONPATH=/usr/local/lib/python3.7/site-packages:$PYTHONPATH
            source src/build-scripts/ci-build-and-test.bash

  windows:
    name: "Windows"
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
      - name: Setup Nuget.exe
        uses: warrenbuckley/Setup-Nuget@v1
      - name: all
        shell: bash
        env:
          PYTHON_VERSION: 3.6
          CMAKE_GENERATOR: "Visual Studio 16 2019"
          OPENEXR_BRANCH: v2.4.0
          SKIP_TESTS: 1
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-win-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash

  sanitizer:
    name: "Sanitizers"
    runs-on: ubuntu-18.04
    if: github.event_name == 'pull_request' || contains(github.ref, 'san') || contains(github.ref, 'RB') || contains(github.ref, 'release') || contains(github.ref, 'master') || contains(github.ref, 'gh')
    steps:
      - uses: actions/checkout@v2
      #- uses: docker://aswfstaging/ci-base:2019
      - name: all
        env:
          CXX: g++-7
          CMAKE_CXX_STANDARD: 14
          SANITIZE: address
          USE_PYTHON: 0
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash

  linux-clang:
    name: "Linux clang: clang9 C++14 avx2 exr2.4"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: clang++
          LLVM_VERSION: 9.0.0
          CMAKE_CXX_STANDARD: 14
          USE_SIMD: avx2,f16c
          OPENEXR_BRANCH: v2.4.0
          OCIO_BRANCH: 1c624651b7
          # Pick an OCIO commit that includes a warning fix we need for clang
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash

  linux-static:
    name: "Linux static libs: gcc7 C++14 exr2.4"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      #- uses: docker://aswfstaging/ci-base:2019
      - name: all
        env:
          CXX: g++-7
          CMAKE_CXX_STANDARD: 14
          BUILD_SHARED_LIBS: OFF
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash

  clang-format:
    name: "clang-format verification"
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: clang++
          BUILDTARGET: clang-format
          SKIP_TESTS: 1
          BUILD_MISSING_DEPS: 0
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/install_homebrew_deps.bash
            source src/build-scripts/ci-build-and-test.bash
