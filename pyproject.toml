[project]
name = "OpenImageIO"
dynamic = ["version"]
description = "Reading, writing, and processing images in a wide variety of file formats, using a format-agnostic API, aimed at VFX applications."
authors = [
    {name = "Larry Gritz", email = "lg@larrygritz.com"},
    {name = "OpenImageIO Contributors", email = "oiio-dev@lists.aswf.io"}
]
maintainers = [
    {name = "OpenImageIO Contributors", email="oiio-dev@lists.aswf.io"},
]
readme = "README.md"
license = {text = "Apache-2.0"}
keywords = [""]
classifiers = [
    "Development Status :: 4 - Beta",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: Apache Software License",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Multimedia :: Video",
    "Topic :: Multimedia :: Video :: Display",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = []
requires-python = ">= 3.9"

[project.urls]
Homepage = "https://openimageio.org/"
Source = "https://github.com/AcademySoftwareFoundation/OpenImageIO"
Documentation = "https://openimageio.readthedocs.io"
Issues = "https://github.com/AcademySoftwareFoundation/OpenImageIO/issues"


[project.scripts]
iconvert = "OpenImageIO:_command_line"
idiff = "OpenImageIO:_command_line"
igrep = "OpenImageIO:_command_line"
iinfo = "OpenImageIO:_command_line"
maketx = "OpenImageIO:_command_line"
oiiotool = "OpenImageIO:_command_line"
testtex = "OpenImageIO:_command_line"

[build-system]
build-backend = "scikit_build_core.build"
requires = [
    "scikit-build-core>=0.10,<1",
    "pybind11",
    #"invoke",
    #"repairwheel",
]

[tool.scikit-build]
minimum-version = "build-system.requires"
cmake.version = "CMakeLists.txt"
wheel.expand-macos-universal-tags = false
wheel.install-dir = "OpenImageIO"
wheel.license-files = [
    "LICENSE.md",
    "THIRD-PARTY.md"
]

[tool.scikit-build.cmake.define]
# OpenImageIO-2.6+ has a mechanism for building, linking, and 
# distributing missing dependencies. See src/cmake for details.
OpenImageIO_BUILD_MISSING_DEPS = "all"
CMAKE_INSTALL_LIBDIR = "lib"
CMAKE_BUILD_TYPE = "MinSizeRel"  # Optimize for size (not speed)

[tool.scikit-build.metadata.version]
# Dynamically parse the version from the CMakeLists.txt file.
provider = "scikit_build_core.metadata.regex"
input = "CMakeLists.txt" 
regex = 'set \(OpenImageIO_VERSION "(?P<value>[0-9a-z.]+)"\)'

[tool.cibuildwheel]
build-verbosity = 1
build = "pp* cp*"
skip = [
    "*musllinux*",
]
#before-build = "pipx install repairwheel && pipx install invoke"
before-build = "pip install repairwheel && pip install invoke"
repair-wheel-command = "invoke wheel-repair --build-dir ${SKBUILD_BUILD_DIR} --wheel-path {wheel} --output-dir {dest_dir}"

[tool.cibuildwheel.macos.environment]
SKBUILD_BUILD_DIR = "/tmp/build_wheels"
SKBUILD_CMAKE_ARGS = "-DOpenImageIO_BUILD_LOCAL_DEPS=TIFF; -DOpenImageIO_BUILD_MISSING_DEPS=all"

[tool.cibuildwheel.linux.environment]
# Suppress warnings that cause linux cibuildwheel build to fail
CXXFLAGS = "-Wno-error=stringop-overflow= -Wno-pragmas"
SKBUILD_BUILD_DIR = "/tmp/build_wheels"
SKBUILD_CMAKE_ARGS = "-DOpenImageIO_BUILD_LOCAL_DEPS=TIFF; -DOpenImageIO_BUILD_MISSING_DEPS=all"