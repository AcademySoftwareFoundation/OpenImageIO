[project]
name = "OpenImageIO"
# The build backend ascertains the version from the CMakeLists.txt file.
dynamic = ["version"]
description = "Reading, writing, and processing images in a wide variety of file formats, using a format-agnostic API, aimed at VFX applications."
authors = [
    {name = "Larry Gritz", email = "lg@larrygritz.com"},
    {name = "OpenImageIO Contributors", email = "oiio-dev@lists.aswf.io"}
]
maintainers = [
    {name = "OpenImageIO Contributors", email="oiio-dev@lists.aswf.io"},
]
readme = "README.md"
license = {text = "Apache-2.0"}
keywords = [""]
classifiers = [
    "Development Status :: 4 - Beta",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: Apache Software License",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Multimedia :: Video",
    "Topic :: Multimedia :: Video :: Display",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = ["numpy"]
requires-python = ">= 3.8"

[project.urls]
Homepage = "https://openimageio.org/"
Source = "https://github.com/AcademySoftwareFoundation/OpenImageIO"
Documentation = "https://openimageio.readthedocs.io"
Issues = "https://github.com/AcademySoftwareFoundation/OpenImageIO/issues"


[project.scripts]
# Use the convention below to expose CLI tools as Python scripts.
iconvert = "OpenImageIO:_command_line"
idiff = "OpenImageIO:_command_line"
igrep = "OpenImageIO:_command_line"
iinfo = "OpenImageIO:_command_line"
maketx = "OpenImageIO:_command_line"
oiiotool = "OpenImageIO:_command_line"
testtex = "OpenImageIO:_command_line"

[build-system]
build-backend = "scikit_build_core.build"
requires = [
    "scikit-build-core>=0.10.6,<1",
    "pybind11",
    "numpy>=2.0,<3"
]

[tool.scikit-build]
build.verbose = true
# Exclude unnecessary directories from the source distribution.
sdist.exclude = [".github", "testsuite", "ASWF", "docs"]
# Pin the minimum scikit-build-core and CMake versions to those specified
# in build-system.requires and CMakeLists.txt, respectively.
minimum-version = "build-system.requires"
cmake.version = "CMakeLists.txt"
wheel.license-files = ["LICENSE.md", "THIRD-PARTY.md"]
# Make sure the package is structured as expected.
wheel.install-dir = "OpenImageIO"


[tool.scikit-build.cmake.define]
# Build missing dependencies. See src/cmake for details.
OpenImageIO_BUILD_MISSING_DEPS = "all"
# Don't build tests. Dramatically improves build time.
OIIO_BUILD_TESTS = "0"


# Dynamically set the package version metadata by pasrsing CMakeLists.txt.
[tool.scikit-build.metadata.version]
provider = "scikit_build_core.metadata.regex"
input = "CMakeLists.txt" 
regex = 'set \(OpenImageIO_VERSION "(?P<value>[0-9a-z.]+)"\)'

# On macOS, make sure dependencies are built for the correct architecture. 
[[tool.scikit-build.overrides]]
if.platform-system = "darwin"
if.platform-machine  = "arm64"
inherit.cmake.define = "append"
cmake.define.CMAKE_OSX_ARCHITECTURES = "arm64"

[[tool.scikit-build.overrides]]
if.platform-system = "darwin"
if.platform-machine  = "x86_64"
inherit.cmake.define = "append"
cmake.define.CMAKE_OSX_ARCHITECTURES = "x86_64"

[[tool.scikit-build.overrides]]
if.platform-system = "linux"
inherit.cmake.define = "append"
cmake.define.CMAKE_CXX_FLAGS = "-Wno-error=stringop-overflow -Wno-pragmas"

[tool.cibuildwheel]
build-verbosity = 1
skip = [
    # Skip 32-bit builds
    "*-win32",
    "*-manylinux_i686",
    # Building with musl seems to work, but the repair-wheel step seems to fail...
    # This may be a bug in repairwheel (or auditwheel)?
    "*musllinux*",  
]
# If the following command returns code 0, we know the CLI Python scripts
# are able to import the OpenImageIO module, which is able to invoke the
# CLI binary executables and find and load all shared libraries. The 
# '--help' flag outputs a list of dependencies with which OIIO was compiled.
test-command = "oiiotool --help"
# Enable free-threaded support
#free-threaded-support = true
# Default images to use when building manylinux wheels locally.
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"
manylinux-pypy_x86_64-image = "manylinux_2_28"
manylinux-pypy_aarch64-image = "manylinux_2_28"
musllinux-x86_64-image = "musllinux_1_2"
musllinux-aarch64-image = "musllinux_1_2"

[tool.cibuildwheel.macos.environment]
# Specify a build directory so the repairwheel command can (re)find
# dependency libraries built by OpenImageIO.
SKBUILD_BUILD_DIR = "/tmp/build_oiio_wheels"
# Always (re)build the TIFF library; otherwise, OIIO has trouble
# with libdeflate during successive incremental builds.
SKBUILD_CMAKE_ARGS = "-DOpenImageIO_BUILD_LOCAL_DEPS=TIFF; -DOpenImageIO_BUILD_MISSING_DEPS=all"
# std::filesystem is only available in macOS 10.15 and later.
MACOSX_DEPLOYMENT_TARGET = "10.15"
# Optimize for size (not speed)
SKBUILD_CMAKE_BUILD_TYPE = "MinSizeRel"

[tool.cibuildwheel.linux.environment]
SKBUILD_BUILD_DIR = "/tmp/build_oiio_wheels"
SKBUILD_CMAKE_ARGS = "-DOpenImageIO_BUILD_LOCAL_DEPS=TIFF; -DOpenImageIO_BUILD_MISSING_DEPS=all"
# Suppress warnings that cause linux cibuildwheel build to fail
CXXFLAGS = "-Wno-error=stringop-overflow -Wno-pragmas"
SKBUILD_CMAKE_BUILD_TYPE = "MinSizeRel"

[tool.cibuildwheel.windows.environment]
SKBUILD_CMAKE_BUILD_TYPE = "MinSizeRel"


# On macOS and Linux, run a custom repair-wheel-command after the build.
# See tasks.py for more details.
[tool.cibuildwheel.macos]
before-build = "pip install 'repairwheel' && pip install invoke"
repair-wheel-command = "invoke wheel-repair --build-dir ${SKBUILD_BUILD_DIR} --wheel-path {wheel} --output-dir {dest_dir}"

[tool.cibuildwheel.linux]
before-build = "pip install repairwheel && pip install invoke"
repair-wheel-command = "invoke wheel-repair --build-dir ${SKBUILD_BUILD_DIR} --wheel-path {wheel} --output-dir {dest_dir}"


[[tool.cibuildwheel.overrides]]
select = "{c,p}p3{7,8}-*"
manylinux-x86_64-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"
manylinux-pypy_x86_64-image = "manylinux2014"
