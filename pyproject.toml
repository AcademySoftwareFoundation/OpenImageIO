[project]
name = "OpenImageIO"
# Align the Python module version with the C++ library version. 
dynamic = ["version"]
description = "Reading, writing, and processing images in a wide variety of file formats, using a format-agnostic API, aimed at VFX applications."
authors = [
    {name = "Larry Gritz", email = "lg@larrygritz.com"},
    {name = "OpenImageIO Contributors", email = "oiio-dev@lists.aswf.io"}
]
maintainers = [
    {name = "OpenImageIO Contributors", email="oiio-dev@lists.aswf.io"},
]
readme = "README.md"
license = {text = "Apache-2.0"}
keywords = [""]
classifiers = [
    "Development Status :: 4 - Beta",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: Apache Software License",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Multimedia :: Video",
    "Topic :: Multimedia :: Video :: Display",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = ["numpy"]
requires-python = ">= 3.7"

[project.urls]
Homepage = "https://openimageio.org/"
Source = "https://github.com/AcademySoftwareFoundation/OpenImageIO"
Documentation = "https://openimageio.readthedocs.io"
Issues = "https://github.com/AcademySoftwareFoundation/OpenImageIO/issues"


[project.scripts]
# Use the convention below to expose CLI tools as Python scripts.
iconvert = "OpenImageIO:_command_line"
idiff = "OpenImageIO:_command_line"
igrep = "OpenImageIO:_command_line"
iinfo = "OpenImageIO:_command_line"
maketx = "OpenImageIO:_command_line"
oiiotool = "OpenImageIO:_command_line"
testtex = "OpenImageIO:_command_line"

[build-system]
build-backend = "scikit_build_core.build"
requires = [
    "scikit-build-core>=0.10,<1",
    "pybind11",
]

[tool.scikit-build]
build.verbose = true
# Pin the minimum scikit-build-core version to that speciied above in the build-system.requires
minimum-version = "build-system.requires"
# Pin the minimum CMake version to that specified in the CMakeLists.txt file.
cmake.version = "CMakeLists.txt"
wheel.expand-macos-universal-tags = true
wheel.install-dir = "OpenImageIO"
wheel.license-files = [
    "LICENSE.md",
    "THIRD-PARTY.md"
]

[tool.scikit-build.cmake.define]
# OpenImageIO-2.6+ has a mechanism for building, linking, and 
# distributing missing dependencies. See src/cmake for details.
OpenImageIO_BUILD_MISSING_DEPS = "all"
# Optimize for size (not speed)
#CMAKE_BUILD_TYPE = "MinSizeRel"
# Live dangerously. Don't build tests.
OIIO_BUILD_TESTS = "0"


[tool.scikit-build.metadata.version]
# Dynamically parse the version from the CMakeLists.txt file.
provider = "scikit_build_core.metadata.regex"
input = "CMakeLists.txt" 
regex = 'set \(OpenImageIO_VERSION "(?P<value>[0-9a-z.]+)"\)'

# On Linux and macOS, we want to install libraries to `lib` to help
# with RPATH issues. This is not necessary on Windows.
[[tool.scikit-build.overrides]]
if.platform-system = "linux"
inherit.cmake.define = "append"
cmake.define.CMAKE_INSTALL_LIBDIR = "lib"

[[tool.scikit-build.overrides]]
if.platform-system = "darwin"
inherit.cmake.define = "append"
cmake.define.CMAKE_INSTALL_LIBDIR = "lib"

# On macOS, make sure dependencies are built for the correct architecture. 
[[tool.scikit-build.overrides]]
if.platform-system = "darwin"
if.platform-machine  = "arm64"
inherit.cmake.define = "append"
cmake.define.CMAKE_OSX_ARCHITECTURES = "arm64"

[[tool.scikit-build.overrides]]
if.platform-system = "darwin"
if.platform-machine  = "x86_64"
inherit.cmake.define = "append"
cmake.define.CMAKE_OSX_ARCHITECTURES = "x86_64"

[tool.cibuildwheel]
build-verbosity = 1
build = "pp* cp*"
skip = [
    # Building with musl seems to work, but the repairwheel step seems to fail...
    # This may be a bug in repairwheel (or auditwheel)?
    "*musllinux*",  
]

[tool.cibuildwheel.macos.environment]
# Specify a build directory so the repairwheel command can (re)find
# dependency libraries built by OpenImageIO.
SKBUILD_BUILD_DIR = "/tmp/build_wheels"
# Always (re)build the TIFF library; otherwise, OIIO has trouble
# with libdeflate when building successive permutations of python
# wheels against the build cache.
SKBUILD_CMAKE_ARGS = "-DOpenImageIO_BUILD_LOCAL_DEPS=TIFF; -DOpenImageIO_BUILD_MISSING_DEPS=all"
MACOSX_DEPLOYMENT_TARGET = "10.15"


[tool.cibuildwheel.linux.environment]
SKBUILD_BUILD_DIR = "/tmp/build_wheels"
SKBUILD_CMAKE_ARGS = "-DOpenImageIO_BUILD_LOCAL_DEPS=TIFF; -DOpenImageIO_BUILD_MISSING_DEPS=all"
# Suppress warnings that cause linux cibuildwheel build to fail
CXXFLAGS = "-Wno-error=stringop-overflow= -Wno-pragmas"


# On macOS and Windows, run a custom repair-wheel-command after the build.
# See tasks.py for more details.
[tool.cibuildwheel.macos]
before-build = "pip install repairwheel && pip install invoke"
repair-wheel-command = "invoke wheel-repair --build-dir ${SKBUILD_BUILD_DIR} --wheel-path {wheel} --output-dir {dest_dir}"

[tool.cibuildwheel.linux]
before-build = "pip install repairwheel && pip install invoke"
repair-wheel-command = "invoke wheel-repair --build-dir ${SKBUILD_BUILD_DIR} --wheel-path {wheel} --output-dir {dest_dir}"