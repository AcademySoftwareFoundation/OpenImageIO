# SPI-specific settings
ifneq (${VERBOSE},)
$(info Including spi/Makefile-bits-arnold)
endif

# READ THIS FIRST
#
# If you are building for Arnold, just make.


# Default namespace
NAMESPACE ?= 'OpenImageIO_Arnold'
MY_CMAKE_FLAGS += -DEXTRA_CPP_ARGS:STRING="-DOIIO_SPI=1" -DOIIO_SITE:STRING=SPI
SPCOMP2_SHOTTREE_LOCATION = /shots/spi/home/lib/SpComp2
INSTALL_SPCOMP2_LOCATION = /shots/spi/home/lib/SpComp2
NUKE_VERSION ?= 10.0v4

## Detect which SPI platform and set $platform, $COMPILER, $SPCOMP2_COMPILER,
## and PYVER. Lots of other decisions are based on these.
ifeq (${SP_OS}, rhel7)
    # Rhel7 (current)
    platform := rhel7
    SPCOMP2_COMPILER=gcc48m64
else ifeq (${SP_OS}, lion)
    # Official OS X build machines with special conventions
    platform := lion
    COMPILER ?= clang
    SPCOMP2_COMPILER ?= clang
else ifeq (${platform}, macosx)
    # Generic OSX machines (including LG's laptop)
    COMPILER ?= clang
    SPCOMP2_COMPILER ?= clang
    PYVER ?= 2.6
else
    $(error Unknown SP_OS=${SP_OS} platform=${platform})
endif  # endif ${SP_OS}

PYVER ?= 2.7
PYTHONLIB ?= /usr/lib64/libpython${PYVER}.so
OCIO_SPCOMP_VERSION ?= 2


## Rhel7 (current)
ifeq (${SP_OS}, rhel7)
    USE_CPP ?= 11
    USE_SIMD ?= sse4.1,aes
    CMAKE ?= cmake
    USE_NINJA ?= 1
    NINJA ?= ninja
    ifeq ($(USE_NINJA),1)
        MY_CMAKE_FLAGS += -DCMAKE_MAKE_PROGRAM=${NINJA}
    endif
    export CCACHE_CPP2 ?= 1
    # Override lib64 and use SPI convention of lib
    MY_CMAKE_FLAGS += -DCMAKE_INSTALL_LIBDIR="${INSTALL_PREFIX}/lib"
    BOOSTVERS ?= 1.55
    SPCOMP2_USE_BOOSTVERS ?= 1
    OCIO_PATH ?= "${SPCOMP2_SHOTTREE_LOCATION}/OpenColorIO/${SP_OS}-${SPCOMP2_COMPILER}/v${OCIO_SPCOMP_VERSION}"
    FIELD3D_HOME ?= "${INSTALL_SPCOMP2_LOCATION}/Field3D/${SP_OS}-${SPCOMP2_COMPILER}-boost155sp/v408"

    ## If not overridden, here is our preferred LLVM installation
    ## (may be changed as new versions are rolled out to the facility)
    LLVM_DIRECTORY ?= /shots/spi/home/lib/arnold/rhel7/llvm_5.0.1

    # A variety of tags can be used to try specific versions of gcc or
    # clang from the site-specific places we have installed them.
    ifeq (${COMPILER},clang4)
	    LLVM_DIRECTORY := /shots/spi/home/lib/arnold/rhel7/llvm_4.0_final
        MY_CMAKE_FLAGS += -DCMAKE_C_COMPILER=${LLVM_DIRECTORY}/bin/clang -DCMAKE_CXX_COMPILER=${LLVM_DIRECTORY}/bin/clang++
	MY_CMAKE_FLAGS += -DCMAKE_C_FLAGS="--gcc-toolchain=/usr" -DCMAKE_CXX_FLAGS="--gcc-toolchain=/usr"
    else ifeq (${COMPILER},clang5)
	    LLVM_DIRECTORY := /shots/spi/home/lib/arnold/rhel7/llvm_5.0.1
        MY_CMAKE_FLAGS += -DCMAKE_C_COMPILER=${LLVM_DIRECTORY}/bin/clang -DCMAKE_CXX_COMPILER=${LLVM_DIRECTORY}/bin/clang++
	MY_CMAKE_FLAGS += -DCMAKE_C_FLAGS="--gcc-toolchain=/usr" -DCMAKE_CXX_FLAGS="--gcc-toolchain=/usr"
    else ifeq (${COMPILER},clang6)
	    LLVM_DIRECTORY := /shots/spi/home/lib/arnold/rhel7/llvm_6.0.0_rc2
        MY_CMAKE_FLAGS += -DCMAKE_C_COMPILER=${LLVM_DIRECTORY}/bin/clang -DCMAKE_CXX_COMPILER=${LLVM_DIRECTORY}/bin/clang++
	MY_CMAKE_FLAGS += -DCMAKE_C_FLAGS="--gcc-toolchain=/usr" -DCMAKE_CXX_FLAGS="--gcc-toolchain=/usr"
    else ifeq (${COMPILER},clang)
        MY_CMAKE_FLAGS += -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
	MY_CMAKE_FLAGS += -DCMAKE_C_FLAGS="--gcc-toolchain=/usr" -DCMAKE_CXX_FLAGS="--gcc-toolchain=/usr"
    else ifeq (${COMPILER}, gcc490)
      MY_CMAKE_FLAGS += \
         -DCMAKE_C_COMPILER=/net/soft_scratch/apps/arnold/tools/gcc-4.9-20130512-test/bin/gcc \
         -DCMAKE_CXX_COMPILER=/net/soft_scratch/apps/arnold/tools/gcc-4.9-20130512-test/bin/g++
    else ifeq (${COMPILER}, gcc6)
        MY_CMAKE_FLAGS += \
           -DCMAKE_C_COMPILER=/opt/rh/devtoolset-6/root/usr/bin/gcc \
           -DCMAKE_CXX_COMPILER=/opt/rh/devtoolset-6/root/usr/bin/g++
    else ifeq (${COMPILER},gcc)
        MY_CMAKE_FLAGS += -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++
    else ifeq (${COMPILER},)
        # default compiler is clang, taken from the LLVM directory
        MY_CMAKE_FLAGS += \
           -DCMAKE_C_COMPILER=${LLVM_DIRECTORY}/bin/clang \
           -DCMAKE_CXX_COMPILER=${LLVM_DIRECTORY}/bin/clang++
	MY_CMAKE_FLAGS += -DCMAKE_C_FLAGS="--gcc-toolchain=/usr" -DCMAKE_CXX_FLAGS="--gcc-toolchain=/usr"
    endif

    MY_CMAKE_FLAGS += \
	-DOPENEXR_CUSTOM_INCLUDE_DIR=/usr/include/OpenEXR2 \
	-DOPENEXR_CUSTOM_LIB_DIR=/usr/lib64/OpenEXR2 \
	-DOCIO_PATH=${OCIO_PATH} \
	-DFIELD3D_HOME=${FIELD3D_HOME} \
	-DHDF5_CUSTOM=1 \
	-DHDF5_LIBRARIES=/usr/lib64/libhdf5.so \
	-DNuke_ROOT=/net/apps/rhel7/foundry/nuke${NUKE_VERSION} \
	-DLIBRAW_INCLUDEDIR_HINT=/usr/include/libraw-0.18.11 \
	-DLIBRAW_LIBDIR_HINT=/usr/lib64/libraw-0.18.11

    BOOSTVERSSP=${BOOSTVERS}sp
    BOOSTVERS_SUFFIX = -${shell echo ${BOOSTVERS} | sed "s/\\./_/"}
    BOOSTVERS_PREFIX = ${shell echo ${BOOSTVERS} | sed "s/\\./_/"}_0
    CONSTRUCTED_BOOSTVERS = ${shell echo ${BOOSTVERS} | sed "s/\\./0/"}00
    MY_CMAKE_FLAGS += \
	-DBOOST_CUSTOM=1 \
	-DBoost_VERSION=${CONSTRUCTED_BOOSTVERS} \
	-DBoost_INCLUDE_DIRS=/usr/include/boost_${BOOSTVERSSP} \
	-DBoost_LIBRARY_DIRS=/usr/lib64/boost_${BOOSTVERSSP} \
	-DBoost_LIBRARIES:STRING="/usr/lib64/boost_${BOOSTVERSSP}/libspboost_${BOOSTVERS_PREFIX}_filesystem-gcc48-mt${BOOSTVERS_SUFFIX}.so;/usr/lib64/boost_${BOOSTVERSSP}/libspboost_${BOOSTVERS_PREFIX}_regex-gcc48-mt${BOOSTVERS_SUFFIX}.so;/usr/lib64/boost_${BOOSTVERSSP}/libspboost_${BOOSTVERS_PREFIX}_system-gcc48-mt${BOOSTVERS_SUFFIX}.so;/usr/lib64/boost_${BOOSTVERSSP}/libspboost_${BOOSTVERS_PREFIX}_thread-gcc48-mt${BOOSTVERS_SUFFIX}.so" \
	-DPYTHONLIBS_FOUND=1 \
	-DPYTHON_LIBRARIES:STRING=${PYTHONLIB}
    # FIXME: Force use of libtiff 3.9.4 because libtiff symbols are not
    # namespaced, and if we compile OIIO against the system default of
    # 4.0.x, but it's used by a Maya plugin and Maya links against the old
    # libtiff.so.3, we get crashes. Hopefully we can come back to this and
    # upgrade to libtiff 4.x later.
    # MY_CMAKE_FLAGS += -DTIFF_INCLUDE_DIR:STRING=/usr/include/libtiff-3.9.4 \
    #                   -DTIFF_LIBRARIES:STRING=/usr/lib64/libtiff.so.3
    # No, for now, just use libtiff I built myself, static, and try to
    # hide its symbols.
    MY_CMAKE_FLAGS += -DTIFF_INCLUDE_DIR:STRING=/usr/include \
                      -DTIFF_LIBRARIES:STRING=/net/soft_scratch/users/lg/tiff-4.0.3/rhel7/lib/libtiff.a
    MY_CMAKE_FLAGS += -DHIDE_SYMBOLS=1
    MY_CMAKE_FLAGS += -DVISIBILITY_MAP_FILE:STRING="${working_dir}/site/spi/hidesymbols.map"
    MY_CMAKE_FLAGS += -DEXTRA_DSO_LINK_ARGS:STRING="-Wl,--exclude-libs,libtiff.a"
    MY_CMAKE_FLAGS += -DUSE_OPENCV=0

    # end rhel7

## Official OS X build machines with special conventions
else ifeq (${SP_OS}, lion)
    USE_CPP ?= 11
    USE_SIMD ?= sse4.2
    MACPORTS_PREFIX=/opt/local-10.7-2012-08
    OCIO_PATH ?= "${SPCOMP2_SHOTTREE_LOCATION}/OpenColorIO/${SP_OS}-${SPCOMP2_COMPILER}/v${OCIO_SPCOMP_VERSION}"
    FIELD3D_HOME ?= "${INSTALL_SPCOMP2_LOCATION}/Field3D/${SP_OS}-${SPCOMP2_COMPILER}-boost151/v306"
    # CMAKE_CXX_COMPILER:
    #   otherwise g++ is used and SPI standardized on clang.
    # OVERRIDE_SHARED_LIBRARY_SUFFIX:
    #   Set to .so so that shared libraries end in .so to be consistent
    #   with Linux SpComp2 shared libraries
    # PYTHON_EXECUTABLE:
    # PYTHON_INCLUDE_DIR:
    # PYTHON_LIBRARY:
    #   Use MacPorts' Python
    # ZLIB_ROOT:
    #   Needed to use SPI's MacPorts' zlib.
    MY_CMAKE_FLAGS += \
      -DOCIO_PATH="${OCIO_PATH}" \
      -DFIELD3D_HOME=${FIELD3D_HOME} \
      -DOPENJPEG_HOME=${MACPORTS_PREFIX} \
      -DOVERRIDE_SHARED_LIBRARY_SUFFIX=.so \
      -DPYTHON_EXECUTABLE=${MACPORTS_PREFIX}/bin/python${PYVER} \
      -DPYTHON_INCLUDE_DIR=${MACPORTS_PREFIX}/Library/Frameworks/Python.framework/Versions/2.7/Headers \
      -DPYTHON_LIBRARIES=${MACPORTS_PREFIX}/Library/Frameworks/Python.framework/Versions/2.7/Python \
      -DZLIB_ROOT=${MACPORTS_PREFIX}
    ifeq (${SPCOMP2_USE_BOOSTVERS}, 1)
	BOOSTVERS_UNDERSCORE = ${shell echo ${BOOSTVERS} | sed "s/\\./_/"}
	MY_CMAKE_FLAGS += \
            -DBOOST_CUSTOM=1 \
            -DBoost_INCLUDE_DIRS=/usr/include/boost_${BOOSTVERS} \
            -DBoost_LIBRARY_DIRS=/usr/lib64/boost_${BOOSTVERS} \
            -DBoost_LIBRARIES=optimized;/usr/lib64/boost_${BOOSTVERS}/libboost_filesystem-gcc44-mt-${BOOSTVERS_UNDERSCORE}.so;optimized;/usr/lib64/boost_${BOOSTVERS}/libboost_system-gcc44-mt-${BOOSTVERS_UNDERSCORE}.so;optimized;/usr/lib64/boost_${BOOSTVERS}/libboost_thread-gcc44-mt-${BOOSTVERS_UNDERSCORE}.so
    endif

    # end SPI lion

## Generic OSX machines (including LG's laptop)
else ifeq (${platform}, macosx)
    USE_SIMD ?= sse4.2
    MY_CMAKE_FLAGS += \
        -DCMAKE_BUILD_WITH_INSTALL_RPATH=1 \
        -DCMAKE_INSTALL_NAME_DIR="${working_dir}/dist/${platform}${variant}/lib"

    # A variety of tags can be used to try specific versions of gcc or
    # clang from the site-specific places we have installed them.
    ifeq (${COMPILER}, gcc48)
        MY_CMAKE_FLAGS += \
           -DCMAKE_C_COMPILER=gcc-4.8 -DCMAKE_CXX_COMPILER=g++-4.8
        USE_LIBCPLUSPLUS := 0
    else ifeq (${COMPILER}, gcc49)
        MY_CMAKE_FLAGS += \
           -DCMAKE_C_COMPILER=gcc-4.9 -DCMAKE_CXX_COMPILER=g++-4.9
        USE_LIBCPLUSPLUS := 0
    else ifeq (${COMPILER}, gcc5)
        MY_CMAKE_FLAGS += \
           -DCMAKE_C_COMPILER=gcc-5 -DCMAKE_CXX_COMPILER=g++-5
        USE_LIBCPLUSPLUS := 0
    else ifeq (${COMPILER}, gcc6)
        MY_CMAKE_FLAGS += \
           -DCMAKE_C_COMPILER=gcc-6 -DCMAKE_CXX_COMPILER=g++-6
        USE_LIBCPLUSPLUS := 0
    else ifeq (${COMPILER}, gcc8)
        MY_CMAKE_FLAGS += \
           -DCMAKE_C_COMPILER=gcc-8 -DCMAKE_CXX_COMPILER=g++-8
        USE_LIBCPLUSPLUS := 0
    else ifeq (${COMPILER},clang7)
        MY_CMAKE_FLAGS += -DCMAKE_C_COMPILER=/usr/local/Cellar/llvm/7.0.0rc1/bin/clang -DCMAKE_CXX_COMPILER=/usr/local/Cellar/llvm/7.0.0rc1/bin/clang++
    else ifeq (${COMPILER},clang)
        MY_CMAKE_FLAGS += -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
    else ifeq (${COMPILER},gcc)
        MY_CMAKE_FLAGS += -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++
    else ifeq (${COMPILER},)
        # default compiler is clang, taken from the LLVM directory
        MY_CMAKE_FLAGS += \
           -DCMAKE_C_COMPILER=${LLVM_DIRECTORY}/bin/clang \
           -DCMAKE_CXX_COMPILER=${LLVM_DIRECTORY}/bin/clang++
    endif

    # end generic OSX

else
    $(error Unknown SP_OS=${SP_OS} platform=${platform})
endif  # endif ${SP_OS}


SPARCH=${SP_OS}-$(SPCOMP2_COMPILER)
ifdef SPCOMP2_USE_BOOSTVERS
	ifneq ($(BOOSTVERS),1.42)
		SPARCH=${SP_OS}-$(SPCOMP2_COMPILER)-boost$(subst .,,$(BOOSTVERS))
	endif
endif


PYVERNOSPACE=${shell echo ${PYVER} | sed "s/\\.//"}
SPPYARCH=$(SPARCH)-py$(PYVERNOSPACE)



all: dist

.PHONY: spcomp2_install spcomp2_install_local clean all

comma:= ,
empty:=
space:= $(empty) $(empty)

local: dist
